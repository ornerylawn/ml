package ml

import "linear"

// LinearGaussianMaximumLikelihoodEstimate finds the argmax of the
// likelihood function for a data set generated by a linear process
// with Gaussian noise, returning the linear parameters of the
// selected process.
func LinearGaussianMaximumLikelihoodEstimate(X linear.Matrix, y linear.Vector) linear.Vector {
	// The argmax of the likelihood function turns out to be the same as
	// the argmin of the squared error function because of the squared
	// difference term in the Gaussian distribution.
	return linear.OrdinaryLeastSquares(X, y)
}

// LinearRegression models a process that yields a single value from
// many inputs, by selecting from the family of linear models. Given a
// vectorized dataset, where each row is a data point, it finds the
// linear combination of X's columns (input features) that best
// matches y (known outputs). Applying the learned linear combination
// to a new input point provides a good estimate of the real process'
// unknown output value if the real process is indeed approximately
// linear.
func LinearRegression(X linear.Matrix, y linear.Vector) linear.Vector {
	// Assume that the data-generating process is actually linear but
	// with Gaussian error.
	return LinearGaussianMaximumLikelihoodEstimate(X, y)
}
